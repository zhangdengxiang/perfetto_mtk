// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_SERVER_SURFACEANIMATOR_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_SERVER_SURFACEANIMATOR_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
class AnimationAdapterProto;
class SurfaceControlProto;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

class SurfaceAnimatorProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  SurfaceAnimatorProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit SurfaceAnimatorProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit SurfaceAnimatorProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_leash() const { return at<1>().valid(); }
  ::protozero::ConstBytes leash() const { return at<1>().as_bytes(); }
  bool has_animation_start_delayed() const { return at<2>().valid(); }
  bool animation_start_delayed() const { return at<2>().as_bool(); }
  bool has_animation_adapter() const { return at<3>().valid(); }
  ::protozero::ConstBytes animation_adapter() const { return at<3>().as_bytes(); }
};

class SurfaceAnimatorProto : public ::protozero::Message {
 public:
  using Decoder = SurfaceAnimatorProto_Decoder;
  enum : int32_t {
    kLeashFieldNumber = 1,
    kAnimationStartDelayedFieldNumber = 2,
    kAnimationAdapterFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.SurfaceAnimatorProto"; }


  using FieldMetadata_Leash =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      SurfaceControlProto,
      SurfaceAnimatorProto>;

  static constexpr FieldMetadata_Leash kLeash{};
  template <typename T = SurfaceControlProto> T* set_leash() {
    return BeginNestedMessage<T>(1);
  }


  using FieldMetadata_AnimationStartDelayed =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kBool,
      bool,
      SurfaceAnimatorProto>;

  static constexpr FieldMetadata_AnimationStartDelayed kAnimationStartDelayed{};
  void set_animation_start_delayed(bool value) {
    static constexpr uint32_t field_id = FieldMetadata_AnimationStartDelayed::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kBool>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_AnimationAdapter =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      AnimationAdapterProto,
      SurfaceAnimatorProto>;

  static constexpr FieldMetadata_AnimationAdapter kAnimationAdapter{};
  template <typename T = AnimationAdapterProto> T* set_animation_adapter() {
    return BeginNestedMessage<T>(3);
  }

};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
