// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_WINDOWMANAGER_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_WINDOWMANAGER_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
class WindowManagerServiceDumpProto;
class WindowManagerTraceEntry;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

namespace perfetto_pbzero_enum_WindowManagerTraceFileProto {
enum MagicNumber : int32_t {
  INVALID = 0,
  MAGIC_NUMBER_L = 1414416727,
  MAGIC_NUMBER_H = 1162035538,
};
} // namespace perfetto_pbzero_enum_WindowManagerTraceFileProto
using WindowManagerTraceFileProto_MagicNumber = perfetto_pbzero_enum_WindowManagerTraceFileProto::MagicNumber;


constexpr WindowManagerTraceFileProto_MagicNumber WindowManagerTraceFileProto_MagicNumber_MIN = WindowManagerTraceFileProto_MagicNumber::INVALID;
constexpr WindowManagerTraceFileProto_MagicNumber WindowManagerTraceFileProto_MagicNumber_MAX = WindowManagerTraceFileProto_MagicNumber::MAGIC_NUMBER_L;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* WindowManagerTraceFileProto_MagicNumber_Name(::perfetto::protos::pbzero::WindowManagerTraceFileProto_MagicNumber value) {
  switch (value) {
  case ::perfetto::protos::pbzero::WindowManagerTraceFileProto_MagicNumber::INVALID:
    return "INVALID";

  case ::perfetto::protos::pbzero::WindowManagerTraceFileProto_MagicNumber::MAGIC_NUMBER_L:
    return "MAGIC_NUMBER_L";

  case ::perfetto::protos::pbzero::WindowManagerTraceFileProto_MagicNumber::MAGIC_NUMBER_H:
    return "MAGIC_NUMBER_H";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

class WindowManagerTraceEntry_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  WindowManagerTraceEntry_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit WindowManagerTraceEntry_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit WindowManagerTraceEntry_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_elapsed_realtime_nanos() const { return at<1>().valid(); }
  uint64_t elapsed_realtime_nanos() const { return at<1>().as_uint64(); }
  bool has_where() const { return at<2>().valid(); }
  ::protozero::ConstChars where() const { return at<2>().as_string(); }
  bool has_window_manager_service() const { return at<3>().valid(); }
  ::protozero::ConstBytes window_manager_service() const { return at<3>().as_bytes(); }
};

class WindowManagerTraceEntry : public ::protozero::Message {
 public:
  using Decoder = WindowManagerTraceEntry_Decoder;
  enum : int32_t {
    kElapsedRealtimeNanosFieldNumber = 1,
    kWhereFieldNumber = 2,
    kWindowManagerServiceFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.WindowManagerTraceEntry"; }


  using FieldMetadata_ElapsedRealtimeNanos =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFixed64,
      uint64_t,
      WindowManagerTraceEntry>;

  static constexpr FieldMetadata_ElapsedRealtimeNanos kElapsedRealtimeNanos{};
  void set_elapsed_realtime_nanos(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ElapsedRealtimeNanos::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFixed64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Where =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      WindowManagerTraceEntry>;

  static constexpr FieldMetadata_Where kWhere{};
  void set_where(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Where::kFieldId, data, size);
  }
  void set_where(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Where::kFieldId, chars.data, chars.size);
  }
  void set_where(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Where::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_WindowManagerService =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      WindowManagerServiceDumpProto,
      WindowManagerTraceEntry>;

  static constexpr FieldMetadata_WindowManagerService kWindowManagerService{};
  template <typename T = WindowManagerServiceDumpProto> T* set_window_manager_service() {
    return BeginNestedMessage<T>(3);
  }

};

class WindowManagerTraceFileProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  WindowManagerTraceFileProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit WindowManagerTraceFileProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit WindowManagerTraceFileProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_magic_number() const { return at<1>().valid(); }
  uint64_t magic_number() const { return at<1>().as_uint64(); }
  bool has_entry() const { return at<2>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstBytes> entry() const { return GetRepeated<::protozero::ConstBytes>(2); }
  bool has_real_to_elapsed_time_offset_nanos() const { return at<3>().valid(); }
  uint64_t real_to_elapsed_time_offset_nanos() const { return at<3>().as_uint64(); }
};

class WindowManagerTraceFileProto : public ::protozero::Message {
 public:
  using Decoder = WindowManagerTraceFileProto_Decoder;
  enum : int32_t {
    kMagicNumberFieldNumber = 1,
    kEntryFieldNumber = 2,
    kRealToElapsedTimeOffsetNanosFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.WindowManagerTraceFileProto"; }


  using MagicNumber = ::perfetto::protos::pbzero::WindowManagerTraceFileProto_MagicNumber;
  static inline const char* MagicNumber_Name(MagicNumber value) {
    return ::perfetto::protos::pbzero::WindowManagerTraceFileProto_MagicNumber_Name(value);
  }
  static inline const MagicNumber INVALID = MagicNumber::INVALID;
  static inline const MagicNumber MAGIC_NUMBER_L = MagicNumber::MAGIC_NUMBER_L;
  static inline const MagicNumber MAGIC_NUMBER_H = MagicNumber::MAGIC_NUMBER_H;

  using FieldMetadata_MagicNumber =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFixed64,
      uint64_t,
      WindowManagerTraceFileProto>;

  static constexpr FieldMetadata_MagicNumber kMagicNumber{};
  void set_magic_number(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_MagicNumber::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFixed64>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Entry =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      WindowManagerTraceEntry,
      WindowManagerTraceFileProto>;

  static constexpr FieldMetadata_Entry kEntry{};
  template <typename T = WindowManagerTraceEntry> T* add_entry() {
    return BeginNestedMessage<T>(2);
  }


  using FieldMetadata_RealToElapsedTimeOffsetNanos =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFixed64,
      uint64_t,
      WindowManagerTraceFileProto>;

  static constexpr FieldMetadata_RealToElapsedTimeOffsetNanos kRealToElapsedTimeOffsetNanos{};
  void set_real_to_elapsed_time_offset_nanos(uint64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_RealToElapsedTimeOffsetNanos::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFixed64>
        ::Append(*this, field_id, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
