// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_SERVER_ANIMATIONADAPTER_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_SERVER_ANIMATIONADAPTER_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
class AlphaAnimationSpecProto;
class AnimationSpecProto;
class LocalAnimationAdapterProto;
class MoveAnimationSpecProto;
class PointProto;
class RemoteAnimationAdapterWrapperProto;
class RemoteAnimationTargetProto;
class RotationAnimationSpecProto;
class WindowAnimationSpecProto;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

class RotationAnimationSpecProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  RotationAnimationSpecProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit RotationAnimationSpecProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit RotationAnimationSpecProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_start_luma() const { return at<1>().valid(); }
  float start_luma() const { return at<1>().as_float(); }
  bool has_end_luma() const { return at<2>().valid(); }
  float end_luma() const { return at<2>().as_float(); }
  bool has_duration_ms() const { return at<3>().valid(); }
  int64_t duration_ms() const { return at<3>().as_int64(); }
};

class RotationAnimationSpecProto : public ::protozero::Message {
 public:
  using Decoder = RotationAnimationSpecProto_Decoder;
  enum : int32_t {
    kStartLumaFieldNumber = 1,
    kEndLumaFieldNumber = 2,
    kDurationMsFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.RotationAnimationSpecProto"; }


  using FieldMetadata_StartLuma =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      RotationAnimationSpecProto>;

  static constexpr FieldMetadata_StartLuma kStartLuma{};
  void set_start_luma(float value) {
    static constexpr uint32_t field_id = FieldMetadata_StartLuma::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_EndLuma =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      RotationAnimationSpecProto>;

  static constexpr FieldMetadata_EndLuma kEndLuma{};
  void set_end_luma(float value) {
    static constexpr uint32_t field_id = FieldMetadata_EndLuma::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DurationMs =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      RotationAnimationSpecProto>;

  static constexpr FieldMetadata_DurationMs kDurationMs{};
  void set_duration_ms(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DurationMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }
};

class AlphaAnimationSpecProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  AlphaAnimationSpecProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit AlphaAnimationSpecProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit AlphaAnimationSpecProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_from() const { return at<1>().valid(); }
  float from() const { return at<1>().as_float(); }
  bool has_to() const { return at<2>().valid(); }
  float to() const { return at<2>().as_float(); }
  bool has_duration_ms() const { return at<3>().valid(); }
  int64_t duration_ms() const { return at<3>().as_int64(); }
};

class AlphaAnimationSpecProto : public ::protozero::Message {
 public:
  using Decoder = AlphaAnimationSpecProto_Decoder;
  enum : int32_t {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kDurationMsFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.AlphaAnimationSpecProto"; }


  using FieldMetadata_From =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      AlphaAnimationSpecProto>;

  static constexpr FieldMetadata_From kFrom{};
  void set_from(float value) {
    static constexpr uint32_t field_id = FieldMetadata_From::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_To =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kFloat,
      float,
      AlphaAnimationSpecProto>;

  static constexpr FieldMetadata_To kTo{};
  void set_to(float value) {
    static constexpr uint32_t field_id = FieldMetadata_To::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kFloat>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_DurationMs =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      AlphaAnimationSpecProto>;

  static constexpr FieldMetadata_DurationMs kDurationMs{};
  void set_duration_ms(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DurationMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }
};

class MoveAnimationSpecProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/3, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  MoveAnimationSpecProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit MoveAnimationSpecProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit MoveAnimationSpecProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_from() const { return at<1>().valid(); }
  ::protozero::ConstBytes from() const { return at<1>().as_bytes(); }
  bool has_to() const { return at<2>().valid(); }
  ::protozero::ConstBytes to() const { return at<2>().as_bytes(); }
  bool has_duration_ms() const { return at<3>().valid(); }
  int64_t duration_ms() const { return at<3>().as_int64(); }
};

class MoveAnimationSpecProto : public ::protozero::Message {
 public:
  using Decoder = MoveAnimationSpecProto_Decoder;
  enum : int32_t {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kDurationMsFieldNumber = 3,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.MoveAnimationSpecProto"; }


  using FieldMetadata_From =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      PointProto,
      MoveAnimationSpecProto>;

  static constexpr FieldMetadata_From kFrom{};
  template <typename T = PointProto> T* set_from() {
    return BeginNestedMessage<T>(1);
  }


  using FieldMetadata_To =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      PointProto,
      MoveAnimationSpecProto>;

  static constexpr FieldMetadata_To kTo{};
  template <typename T = PointProto> T* set_to() {
    return BeginNestedMessage<T>(2);
  }


  using FieldMetadata_DurationMs =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt64,
      int64_t,
      MoveAnimationSpecProto>;

  static constexpr FieldMetadata_DurationMs kDurationMs{};
  void set_duration_ms(int64_t value) {
    static constexpr uint32_t field_id = FieldMetadata_DurationMs::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt64>
        ::Append(*this, field_id, value);
  }
};

class WindowAnimationSpecProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  WindowAnimationSpecProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit WindowAnimationSpecProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit WindowAnimationSpecProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_animation() const { return at<1>().valid(); }
  ::protozero::ConstChars animation() const { return at<1>().as_string(); }
};

class WindowAnimationSpecProto : public ::protozero::Message {
 public:
  using Decoder = WindowAnimationSpecProto_Decoder;
  enum : int32_t {
    kAnimationFieldNumber = 1,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.WindowAnimationSpecProto"; }


  using FieldMetadata_Animation =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      WindowAnimationSpecProto>;

  static constexpr FieldMetadata_Animation kAnimation{};
  void set_animation(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Animation::kFieldId, data, size);
  }
  void set_animation(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Animation::kFieldId, chars.data, chars.size);
  }
  void set_animation(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Animation::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }
};

class AnimationSpecProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/4, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  AnimationSpecProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit AnimationSpecProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit AnimationSpecProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_window() const { return at<1>().valid(); }
  ::protozero::ConstBytes window() const { return at<1>().as_bytes(); }
  bool has_move() const { return at<2>().valid(); }
  ::protozero::ConstBytes move() const { return at<2>().as_bytes(); }
  bool has_alpha() const { return at<3>().valid(); }
  ::protozero::ConstBytes alpha() const { return at<3>().as_bytes(); }
  bool has_rotate() const { return at<4>().valid(); }
  ::protozero::ConstBytes rotate() const { return at<4>().as_bytes(); }
};

class AnimationSpecProto : public ::protozero::Message {
 public:
  using Decoder = AnimationSpecProto_Decoder;
  enum : int32_t {
    kWindowFieldNumber = 1,
    kMoveFieldNumber = 2,
    kAlphaFieldNumber = 3,
    kRotateFieldNumber = 4,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.AnimationSpecProto"; }


  using FieldMetadata_Window =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      WindowAnimationSpecProto,
      AnimationSpecProto>;

  static constexpr FieldMetadata_Window kWindow{};
  template <typename T = WindowAnimationSpecProto> T* set_window() {
    return BeginNestedMessage<T>(1);
  }


  using FieldMetadata_Move =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      MoveAnimationSpecProto,
      AnimationSpecProto>;

  static constexpr FieldMetadata_Move kMove{};
  template <typename T = MoveAnimationSpecProto> T* set_move() {
    return BeginNestedMessage<T>(2);
  }


  using FieldMetadata_Alpha =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      AlphaAnimationSpecProto,
      AnimationSpecProto>;

  static constexpr FieldMetadata_Alpha kAlpha{};
  template <typename T = AlphaAnimationSpecProto> T* set_alpha() {
    return BeginNestedMessage<T>(3);
  }


  using FieldMetadata_Rotate =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RotationAnimationSpecProto,
      AnimationSpecProto>;

  static constexpr FieldMetadata_Rotate kRotate{};
  template <typename T = RotationAnimationSpecProto> T* set_rotate() {
    return BeginNestedMessage<T>(4);
  }

};

class LocalAnimationAdapterProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  LocalAnimationAdapterProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit LocalAnimationAdapterProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit LocalAnimationAdapterProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_animation_spec() const { return at<1>().valid(); }
  ::protozero::ConstBytes animation_spec() const { return at<1>().as_bytes(); }
};

class LocalAnimationAdapterProto : public ::protozero::Message {
 public:
  using Decoder = LocalAnimationAdapterProto_Decoder;
  enum : int32_t {
    kAnimationSpecFieldNumber = 1,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.LocalAnimationAdapterProto"; }


  using FieldMetadata_AnimationSpec =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      AnimationSpecProto,
      LocalAnimationAdapterProto>;

  static constexpr FieldMetadata_AnimationSpec kAnimationSpec{};
  template <typename T = AnimationSpecProto> T* set_animation_spec() {
    return BeginNestedMessage<T>(1);
  }

};

class RemoteAnimationAdapterWrapperProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/1, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  RemoteAnimationAdapterWrapperProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit RemoteAnimationAdapterWrapperProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit RemoteAnimationAdapterWrapperProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_target() const { return at<1>().valid(); }
  ::protozero::ConstBytes target() const { return at<1>().as_bytes(); }
};

class RemoteAnimationAdapterWrapperProto : public ::protozero::Message {
 public:
  using Decoder = RemoteAnimationAdapterWrapperProto_Decoder;
  enum : int32_t {
    kTargetFieldNumber = 1,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.RemoteAnimationAdapterWrapperProto"; }


  using FieldMetadata_Target =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RemoteAnimationTargetProto,
      RemoteAnimationAdapterWrapperProto>;

  static constexpr FieldMetadata_Target kTarget{};
  template <typename T = RemoteAnimationTargetProto> T* set_target() {
    return BeginNestedMessage<T>(1);
  }

};

class AnimationAdapterProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  AnimationAdapterProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit AnimationAdapterProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit AnimationAdapterProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_local() const { return at<1>().valid(); }
  ::protozero::ConstBytes local() const { return at<1>().as_bytes(); }
  bool has_remote() const { return at<2>().valid(); }
  ::protozero::ConstBytes remote() const { return at<2>().as_bytes(); }
};

class AnimationAdapterProto : public ::protozero::Message {
 public:
  using Decoder = AnimationAdapterProto_Decoder;
  enum : int32_t {
    kLocalFieldNumber = 1,
    kRemoteFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.AnimationAdapterProto"; }


  using FieldMetadata_Local =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      LocalAnimationAdapterProto,
      AnimationAdapterProto>;

  static constexpr FieldMetadata_Local kLocal{};
  template <typename T = LocalAnimationAdapterProto> T* set_local() {
    return BeginNestedMessage<T>(1);
  }


  using FieldMetadata_Remote =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RemoteAnimationAdapterWrapperProto,
      AnimationAdapterProto>;

  static constexpr FieldMetadata_Remote kRemote{};
  template <typename T = RemoteAnimationAdapterWrapperProto> T* set_remote() {
    return BeginNestedMessage<T>(2);
  }

};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
