// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_APP_WINDOW_CONFIGURATION_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_APP_WINDOW_CONFIGURATION_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
class RectProto;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

class WindowConfigurationProto_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/5, /*HAS_NONPACKED_REPEATED_FIELDS=*/false> {
 public:
  WindowConfigurationProto_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit WindowConfigurationProto_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit WindowConfigurationProto_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_app_bounds() const { return at<1>().valid(); }
  ::protozero::ConstBytes app_bounds() const { return at<1>().as_bytes(); }
  bool has_windowing_mode() const { return at<2>().valid(); }
  int32_t windowing_mode() const { return at<2>().as_int32(); }
  bool has_activity_type() const { return at<3>().valid(); }
  int32_t activity_type() const { return at<3>().as_int32(); }
  bool has_bounds() const { return at<4>().valid(); }
  ::protozero::ConstBytes bounds() const { return at<4>().as_bytes(); }
  bool has_max_bounds() const { return at<5>().valid(); }
  ::protozero::ConstBytes max_bounds() const { return at<5>().as_bytes(); }
};

class WindowConfigurationProto : public ::protozero::Message {
 public:
  using Decoder = WindowConfigurationProto_Decoder;
  enum : int32_t {
    kAppBoundsFieldNumber = 1,
    kWindowingModeFieldNumber = 2,
    kActivityTypeFieldNumber = 3,
    kBoundsFieldNumber = 4,
    kMaxBoundsFieldNumber = 5,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.WindowConfigurationProto"; }


  using FieldMetadata_AppBounds =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      WindowConfigurationProto>;

  static constexpr FieldMetadata_AppBounds kAppBounds{};
  template <typename T = RectProto> T* set_app_bounds() {
    return BeginNestedMessage<T>(1);
  }


  using FieldMetadata_WindowingMode =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      WindowConfigurationProto>;

  static constexpr FieldMetadata_WindowingMode kWindowingMode{};
  void set_windowing_mode(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_WindowingMode::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_ActivityType =
    ::protozero::proto_utils::FieldMetadata<
      3,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kInt32,
      int32_t,
      WindowConfigurationProto>;

  static constexpr FieldMetadata_ActivityType kActivityType{};
  void set_activity_type(int32_t value) {
    static constexpr uint32_t field_id = FieldMetadata_ActivityType::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kInt32>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Bounds =
    ::protozero::proto_utils::FieldMetadata<
      4,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      WindowConfigurationProto>;

  static constexpr FieldMetadata_Bounds kBounds{};
  template <typename T = RectProto> T* set_bounds() {
    return BeginNestedMessage<T>(4);
  }


  using FieldMetadata_MaxBounds =
    ::protozero::proto_utils::FieldMetadata<
      5,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kMessage,
      RectProto,
      WindowConfigurationProto>;

  static constexpr FieldMetadata_MaxBounds kMaxBounds{};
  template <typename T = RectProto> T* set_max_bounds() {
    return BeginNestedMessage<T>(5);
  }

};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
