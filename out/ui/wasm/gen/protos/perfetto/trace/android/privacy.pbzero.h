// Autogenerated by the ProtoZero compiler plugin. DO NOT EDIT.

#ifndef PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_PRIVACY_PROTO_H_
#define PERFETTO_PROTOS_PROTOS_PERFETTO_TRACE_ANDROID_PRIVACY_PROTO_H_

#include <stddef.h>
#include <stdint.h>

#include "perfetto/protozero/field_writer.h"
#include "perfetto/protozero/message.h"
#include "perfetto/protozero/packed_repeated_fields.h"
#include "perfetto/protozero/proto_decoder.h"
#include "perfetto/protozero/proto_utils.h"

namespace perfetto {
namespace protos {
namespace pbzero {
enum Destination : int32_t;
} // Namespace pbzero.
} // Namespace protos.
} // Namespace perfetto.

namespace perfetto {
namespace protos {
namespace pbzero {

enum Destination : int32_t {
  DEST_LOCAL = 0,
  DEST_EXPLICIT = 100,
  DEST_AUTOMATIC = 200,
  DEST_UNSET = 255,
};

constexpr Destination Destination_MIN = Destination::DEST_LOCAL;
constexpr Destination Destination_MAX = Destination::DEST_UNSET;


PERFETTO_PROTOZERO_CONSTEXPR14_OR_INLINE
const char* Destination_Name(::perfetto::protos::pbzero::Destination value) {
  switch (value) {
  case ::perfetto::protos::pbzero::Destination::DEST_LOCAL:
    return "DEST_LOCAL";

  case ::perfetto::protos::pbzero::Destination::DEST_EXPLICIT:
    return "DEST_EXPLICIT";

  case ::perfetto::protos::pbzero::Destination::DEST_AUTOMATIC:
    return "DEST_AUTOMATIC";

  case ::perfetto::protos::pbzero::Destination::DEST_UNSET:
    return "DEST_UNSET";
  }
  return "PBZERO_UNKNOWN_ENUM_VALUE";
}

class PrivacyFlags_Decoder : public ::protozero::TypedProtoDecoder</*MAX_FIELD_ID=*/2, /*HAS_NONPACKED_REPEATED_FIELDS=*/true> {
 public:
  PrivacyFlags_Decoder(const uint8_t* data, size_t len) : TypedProtoDecoder(data, len) {}
  explicit PrivacyFlags_Decoder(const std::string& raw) : TypedProtoDecoder(reinterpret_cast<const uint8_t*>(raw.data()), raw.size()) {}
  explicit PrivacyFlags_Decoder(const ::protozero::ConstBytes& raw) : TypedProtoDecoder(raw.data, raw.size) {}
  bool has_dest() const { return at<1>().valid(); }
  int32_t dest() const { return at<1>().as_int32(); }
  bool has_patterns() const { return at<2>().valid(); }
  ::protozero::RepeatedFieldIterator<::protozero::ConstChars> patterns() const { return GetRepeated<::protozero::ConstChars>(2); }
};

class PrivacyFlags : public ::protozero::Message {
 public:
  using Decoder = PrivacyFlags_Decoder;
  enum : int32_t {
    kDestFieldNumber = 1,
    kPatternsFieldNumber = 2,
  };
  static constexpr const char* GetName() { return ".perfetto.protos.PrivacyFlags"; }


  using FieldMetadata_Dest =
    ::protozero::proto_utils::FieldMetadata<
      1,
      ::protozero::proto_utils::RepetitionType::kNotRepeated,
      ::protozero::proto_utils::ProtoSchemaType::kEnum,
      Destination,
      PrivacyFlags>;

  static constexpr FieldMetadata_Dest kDest{};
  void set_dest(Destination value) {
    static constexpr uint32_t field_id = FieldMetadata_Dest::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kEnum>
        ::Append(*this, field_id, value);
  }

  using FieldMetadata_Patterns =
    ::protozero::proto_utils::FieldMetadata<
      2,
      ::protozero::proto_utils::RepetitionType::kRepeatedNotPacked,
      ::protozero::proto_utils::ProtoSchemaType::kString,
      std::string,
      PrivacyFlags>;

  static constexpr FieldMetadata_Patterns kPatterns{};
  void add_patterns(const char* data, size_t size) {
    AppendBytes(FieldMetadata_Patterns::kFieldId, data, size);
  }
  void add_patterns(::protozero::ConstChars chars) {
    AppendBytes(FieldMetadata_Patterns::kFieldId, chars.data, chars.size);
  }
  void add_patterns(std::string value) {
    static constexpr uint32_t field_id = FieldMetadata_Patterns::kFieldId;
    // Call the appropriate protozero::Message::Append(field_id, ...)
    // method based on the type of the field.
    ::protozero::internal::FieldWriter<
      ::protozero::proto_utils::ProtoSchemaType::kString>
        ::Append(*this, field_id, value);
  }
};

} // Namespace.
} // Namespace.
} // Namespace.
#endif  // Include guard.
